name: Update Publications

on:
  schedule:
    - cron: "0 0 * * *"  # Run daily at midnight
  workflow_dispatch:
  # push:
  #   branches:
  #     - main 

jobs:
  update_publications:
    runs-on: ubuntu-latest
    environment:
      name: github-pages  
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    # - name: Set up Ruby
    #   uses: ruby/setup-ruby@v1
    #   with:
    #     ruby-version: 2.7
    
    # - name: Install dependencies
    #   run: |
    #     gem install bundler
    #     bundle install
    
    - name: Fetch Data from ResearchMap
      run: |
        # Use curl to fetch data from the ResearchMap API
        API_RESPONSE=$(curl -s -X GET "https://api.researchmap.jp/kosuke-mitarai/published_papers")
        
        # Parse the JSON response using jq and extract relevant data
        PAPERS=$(echo "$API_RESPONSE" | jq -c '.items[]')
        
        # Generate Markdown content for your Jekyll site based on extracted data
        # Generate the content for the publications page
        echo "---" > publications.md
        echo "layout: page" >> publications.md
        echo "title: Publications" >> publications.md
        echo "---" >> publications.md
        echo "" >> publications.md
        echo "## Peer-reviewed" >> publications.md
        echo "" >> publications.md
        # Loop through each extracted paper and add it to the content
        while read -r paper; do
          JOURNAL_NAME=$(echo "$paper" | jq -r '.publication_name.en')
          VOLUME=$(echo "$paper" | jq -r '.volume')
          STARTING_PAGE=$(echo "$paper" | jq -r '.starting_page')
          TITLE=$(echo "$paper" | jq -r '.paper_title.en')
          AUTHORS=$(echo "$paper" | jq -r '.authors.en | map(.name) | join(", ")')
          PUBLICATION_DATE=$(echo "$paper" | jq -r '.publication_date')
          YEAR=$(echo "$PUBLICATION_DATE" | cut -d'-' -f1)
          DOI=$(echo "$paper" | jq -r '.identifiers.doi[0]')
          
          echo "- $AUTHORS, [$TITLE](https://doi.org/$DOI), $JOURNAL_NAME **$VOLUME**, $STARTING_PAGE ($YEAR)" >> publications.md
        done <<< "$PAPERS"
    - name: Fetch Misc Data from ResearchMap
      run: |
        # Use curl to fetch data from the ResearchMap API for misc entries
        MISC_API_RESPONSE=$(curl -s -X GET "https://api.researchmap.jp/kosuke-mitarai/misc")
        
        # Debug output
        # echo "MISC_API_RESPONSE: $MISC_API_RESPONSE"
        
        MISC_ENTRIES=$(echo "$MISC_API_RESPONSE" | jq -c '.items[]')

        # Generate Markdown content for both Japanese and English articles
        echo "" >> publications.md
        echo "## arXiv preprints" >> publications.md
        echo "" >> publications.md
        while read -r entry; do
          # Extract common values
          TITLE_EN=$(echo "$entry" | jq -r '.paper_title.en // empty')
          
          if [ -n "$TITLE_EN" ]; then
            AUTHORS=$(echo "$entry" | jq -r '.authors.en | map(.name) | join(", ")')
            DESCRIPTION=$(echo "$entry" | jq -r '.description.en')
            PUBLICATION_DATE=$(echo "$entry" | jq -r '.publication_date')
            YEAR=$(echo "$PUBLICATION_DATE" | cut -d'-' -f1)  # Extract the year from publication_date
            
            # Check if arXiv_id exists
            ARXIV_ID=$(echo "$entry" | jq -r '.identifiers.arxiv_id[0] // empty')
            if [ -n "$ARXIV_ID" ]; then
              ARXIV_URL=$(echo "$entry" | jq -r '.see_also[] | select(.label == "arxiv_url") | .["@id"]')
              ARXIV_YEAR=$(echo "$ARXIV_ID" | cut -d':' -f2)  # Extract the year from arXiv ID
              echo "$ARXIV_URL, $ARXIV_ID"
              # Generate the content for the publications page
              echo "- $AUTHORS, [$TITLE_EN](https://arxiv.org/abs/$ARXIV_ID), $ARXIV_ID ($YEAR)" >> publications.md
            fi
          fi
        done <<< "$MISC_ENTRIES"
        
        # Generate Markdown content for both Japanese and English articles
        echo "" >> publications.md
        echo "## 解説/総説" >> publications.md
        echo "" >> publications.md
        while read -r entry; do
          # Check if paper_title.ja is null
          TITLE_JA=$(echo "$entry" | jq -r '.paper_title.ja // empty')
          
          if [ -n "$TITLE_JA" ]; then
            # Extract other values
            AUTHORS=$(echo "$entry" | jq -r '.authors.ja | map(.name) | join(", ")')
            JOURNAL_NAME=$(echo "$entry" | jq -r '.publication_name.ja')
            DESCRIPTION=$(echo "$entry" | jq -r '.description.ja')
            VOLUME=$(echo "$entry" | jq -r '.volume')
            STARTING_PAGE=$(echo "$entry" | jq -r '.starting_page')
            PUBLICATION_DATE=$(echo "$entry" | jq -r '.publication_date')
            YEAR=$(echo "$PUBLICATION_DATE" | cut -d'-' -f1)
            # Extract URL and DOI
            ARTICLE_URL=$(echo "$entry" | jq -r '.see_also // [] | map(select(.label == "url")) | .[0]["@id"] // empty')
            DOI_URL=$(echo "$entry" | jq -r '.see_also // [] | map(select(.label == "doi")) | .[0]["@id"] // empty')
            # Determine the link to use
            LINK_TO_USE=""
            if [ -n "$DOI_URL" ]; then
              LINK_TO_USE="$DOI_URL"
            elif [ -n "$ARTICLE_URL" ]; then
              LINK_TO_USE="$ARTICLE_URL"
            fi
        
            # Create the basic publication entry
            if [ -n "$LINK_TO_USE" ]; then
              PUBLICATION_ENTRY="- [$TITLE_JA]($LINK_TO_USE), $AUTHORS, $JOURNAL_NAME ($YEAR)"
            else
              PUBLICATION_ENTRY="- $TITLE_JA, $AUTHORS, $JOURNAL_NAME ($YEAR)"
            fi
            
            # Check for volume and starting page
            if [ "$VOLUME" != "null" ] && [ "$STARTING_PAGE" != "null" ]; then
              if [ -n "$LINK_TO_USE" ]; then
                PUBLICATION_ENTRY="- $AUTHORS, [$TITLE_JA]($LINK_TO_USE), $JOURNAL_NAME **$VOLUME**, $STARTING_PAGE ($YEAR)"
              else
                PUBLICATION_ENTRY="- $AUTHORS, $TITLE_JA, $JOURNAL_NAME **$VOLUME**, $STARTING_PAGE ($YEAR)"
              fi
            fi
        
            echo "$PUBLICATION_ENTRY" >> publications.md
          fi
        done <<< "$MISC_ENTRIES"


    - name: Print Diff
      run: git diff publications.md
    
    - name: Check for Changes
      id: check_changes
      run: |
        git diff --name-only -- publications.md | while read line; do
          # Process each changed line to extract and store relevant information
          # This is a placeholder, replace with actual command to extract titles or links
          echo "$(extracted information)"
          echo "$(extracted information)" >> diff.txt
        done
        git diff --exit-code publications.md || echo "changed=yes" >> $GITHUB_ENV
        if [[ -z $(git diff -- publications.md) ]]; then
          echo "No changes to publications.md. Exiting..."
          echo "changed=no" >> $GITHUB_ENV
        else
          echo "changed=yes" >> $GITHUB_ENV
        fi
    
    - name: Commit and Push Changes
      if: env.changed == 'yes'
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add publications.md
        git commit -m "Update publications"
        git push origin main


            
    - name: Commit and Push New Post
      if: env.changed == 'yes'  # Only run this step if a new post was created
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add _posts/
        git commit -m "Add new post for updated publications"
        git push origin main
